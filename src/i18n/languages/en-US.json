{
  "autonym": "English",
  "common": {
    "neptun": "NEPTUN",
    "group": "Group",
    "groups": "Groups",
    "name": "Name",
    "details": "Details",
    "download": "Download",
    "serverError": "Server Error",
    "yes": "Yes",
    "no": "No",
    "save": "Save",
    "add": "Add",
    "cancel": "Cancel",
    "delete": "Delete",
    "confirmDelete": "Are you sure you want to delete the selected item?",
    "duplicate": "Duplicate",
    "edit": "Edit",
    "options": "Options",
    "userAddFailed": "Failed to add the following users",
    "userAddSuccess": "Added {{count}} user(s)",
    "neptunCodes": "NEPTUN-codes separated with spaces",
    "neptunCodesRequired": "Please provide valid NEPTUN-codes separated with spaces!",
    "students": "Students",
    "instructors": "Instructors",
    "officialEmail": "Official email address",
    "customEmail": "Custom email address",
    "fieldRequired": "Field is required",
    "minValueRequired": "Smallest allowed value: {{value}}",
    "maxValueRequired": "Largest allowed value: {{value}}",
    "semesters": "Semesters",
    "minutes": "minutes",
    "studentName": "Student name",
    "noFilesSelected": "Please select at least one file!",
    "error": "Error",
    "success": "Success",
    "information": "Information",
    "confirmation": "Confirmation",
    "actual": "Actual",
    "all": "All",
    "description": "Description",
    "openInNewTab": "Open in new tab",
    "search": "Search",
    "settings": "Settings",
    "modify": "Modify",
    "export": "Export",
    "timezone": "Timezone",
    "previous": "Previous",
    "next": "Next",
    "insert": "Insert",
    "back": "Back",
    "view": "View",
    "list": "List",
    "grid": "Grid",
    "areYouSure": "Are you sure?",
    "confirmDiscard": "If you close the modal, all your changes will be lost!"
  },
  "passwordProtected": {
    "passwordProtected": "Password protected",
    "verify": "Verify",
    "verifyRequired": "Verify required",
    "verifySuccess": "Successful verification",
    "verifyDisableIpCheck": "Disable IP address check",
    "verified": "Verified",
    "studentWarning": "The solution must be validated by the instructor, otherwise it will be invalid!"
  },
  "fileUpload": {
    "success": "{{count}} file(s) uploaded successfully",
    "failed":  "File upload failed",
    "sizeLimitError": "The total size of uploaded files is limited to {{maxSize}} MiB!",
    "browse": "Browse",
    "upload": "Upload",
    "uploadInProgress": "Uploading..."
  },
  "errorPage": {
    "genericMessage": "Something went wrong",
    "pageNotFound": "Page not found",
    "accessDenied": "Access denied",
    "versionError": "The backend version does not meet with the required version range! Excepted range: {{requiredRange}}, current version: {{version}}."
  },
  "login": {
    "login": "Login",
    "username": "Username",
    "password": "Password",
    "ldapHelp": "You can log in with your INF.ELTE.HU account. (The one used to login on ELTE FI faculty computers.)",
    "student": "Student access",
    "instructor": "Instructor access",
    "admin": "Administrator access",
    "neptunRequired": "Invalid or missing NEPTUN-code",
    "nameRequired": "Name is required",
    "emailRequired": "Email is required",
    "mockUsers": {
      "student": "Student {{number}}",
      "instructor": "Instructor {{number}}",
      "admin": "Administrator {{number}}"
    }
  },
  "settings": {
    "customEmail": {
      "confirmed": "Email address confirmed",
      "unconfirmed": "Unconfirmed email address. Please confirm your custom email address before sending notifications there."
    },
    "notificationTarget": {
      "label": "Send notifications to",
      "required": "Notification target is required",
      "official": "Official email address",
      "custom": "Custom email address",
      "none": "Donâ€™t send notifications",
      "noEmailToUnconfirmedAddress": "Please confirm your custom email address before sending notifications there"
    },
    "language": {
      "label": "Language",
      "required": "Language is required"
    },
    "successfullySaved": "Settings successfully saved"
  },
  "confirmEmail": {
    "success": "The email confirmation was successful.",
    "openSettings": "You might now want to visit <settings>your settings</settings> to change the address used for notifications.",
    "logIn": "You might now want to <login>log in</login> to change the address used for notifications.",
    "differentUser": "<strong>Warning:</strong> The email address belongs to another user. To adjust your notification preferences, <logout>log out</logout> and log in with the user this address belongs to.",
    "failed": "The email confirmation failed. Either you provided a wrong confirmation code, or the code has expired."
  },
  "navbar": {
    "taskmanager": "Task Manager",
    "exam": "Exam",
    "logout": "Logout ({{neptun}})",
    "role": "Role",
    "roles": {
      "student": "Student",
      "instructor": "Instructor",
      "admin": "Admin"
    },
    "semesterManager": "Semester Manager",
    "plagiarism": "Plagiarism"
  },
  "course": {
    "course": "Course",
    "courses": "Courses",
    "code": "Course code",
    "lecturers": "Lecturers",
    "addLecturers": "Add lecturers",
    "newCourse": "New Course",
    "editCourse": "Edit Course"
  },
  "group": {
    "number": "Group code",
    "instructors": "Instructors",
    "examGroup": "Exam Group",
    "newGroup": "New Group",
    "editGroup": "Edit Group",
    "addStudents": "Add Students",
    "addInstructors": "Add Instructors",
    "courseIDRequired": "Course is required",
    "studentSolutions": "Solutions and statistics",
    "stats": {
      "stats": "Statistics",
      "intime": "In time",
      "delayed": "Delayed",
      "missed": "Missed",
      "due": "Due",
      "handlingTime": "Handling Time",
      "submitted": "Submitted",
      "points": "Points",
      "min": "Minimum",
      "max": "Maximum",
      "avg": "Average",
      "studentPoints": "Points of student"
    },
    "successfulDuplication": "Successfully duplicated",
    "examGroupHelp": "For exam groups the group number and the identity of the instructors and submission graders are confidential toward the students.",
    "canvasSync":  "Canvas synchronization",
    "canvasCourse": "Canvas course",
    "canvasSection": "Canvas section",
    "studentCount": "{{count}} students",
    "successfulCanvasSync": "Successful Canvas synchronization",
    "waitingForCanvas": "Waiting for Canvas...",
    "localTime": "Local time",
    "groupTime": "Group time",
    "notes": "Notes",
    "addNotes": "Add Notes",
    "studentNotes": "Notes for the Student"
  },
  "task": {
    "task": "Assignment",
    "tasks": "Assignments",
    "name": "Name",
    "softDeadLine": "Soft deadline",
    "hardDeadLine": "Hard deadline",
    "category": "Category",
    "available": "Available",
    "creator": "Creator",
    "description": "Description",
    "submittedSolution": "Solution",
    "grade": "Grade",
    "notes": "Notes",
    "instructorFiles": "Instructor files",
    "instructorFilesHelp": "Files uploaded here will be accessible for students (once the task is available for them).",
    "solution": "Solution",
    "downloadSolutions": "Download Solutions",
    "status": "Status",
    "uploadTime": "Upload time",
    "uploadCount": "Upload count",
    "delay": "Delay",
    "graderName": "Grader",
    "newSolution": "Upload new solution",
    "solutions": "Solutions",
    "tester": "Automatic tester",
    "passwordProtectedHelp": "For password-protected tasks the solutions must be verified after uploading. Leave the password field blank to turn off password protection. Important: after removing the password all solutions will be verified!",
    "passwordProtectedGitPush": "For password-protected tasks the 'git push' command is disabled.",
    "isVersionControlled": "Version controlled",
    "versionControlledHelp": "Uses separate Git repositories for each student. Not modifiable after task is created!",
    "categories": {
      "smallerTasks": "Smaller Tasks",
      "largerTasks": "Larger Tasks",
      "classworkTasks": "Classwork Tasks",
      "exams": "Exams"
    },
    "deadlineStatus": {
      "notAvailable": "Not available",
      "softDeadlineExpired": "Soft deadline expired",
      "hardDeadlineExpired": "Hard deadline expired",
      "withinTheDeadline": "Within the deadline"
    },
    "newTask": "New Task",
    "editTask": "Edit Task",
    "downloadAll": "Download All",
    "downloadOnlyUngraded": "Download ungraded",
    "uploader": "Uploader",
    "successfulGrade": "Successfully graded",
    "autoTester": {
      "activate": "Activate automatic testing",
      "testCases": "Test cases",
      "arguments": "Arguments",
      "argumentsHelp": "Passed as console arguments to the process.",
      "input": "Input",
      "inputHelp": "Passed through the standard input stream to the process.",
      "output": "Output",
      "outputHelp": "Expected content of the standard output stream. Starting and trailing whitespaces are not expected to match precisely.",
      "newTestCase": "Add testcase",
      "editTestCase": "Edit testcase",
      "testOS": "Operating System",
      "imageName": "Docker Image",
      "uploadDockerfile": "Upload Dockerfile",
      "uploadDockerfileHelp": "If you upload a Dockerfile, the application will ignore the value of the Docker Image filed. Notice that building an image from a Dockerfile can take up several minutes.",
      "compileInstructions": "Compiler instructions",
      "runInstructions": "Run instructions",
      "runInstructionsHelp": "Arguments of the test case are available in the \"$@\" variable. (@PSBoundParameters in case of PowerShell.) The serial of the test case is stored in the $TEST_CASE_NR environment variable.",
      "runWebAppInstructionsHelp": "Set up web application environment and start web application. The instructions will be executed in asynchronously.",
      "showFullErrorMsg": "When checked students can see the detailed compile or runtime error messages.",
      "reevaluateAutoTest" : "Reevaluate already tested, but ungraded student submissions",
      "templates": "Templates",
      "templateHelp": "In case you are not familiar with the interface, it is recommended to start with a template. Please click on the Templates button and select one of the preconfigured templates.",
      "builtImageNotFound": "The automatic tester only runs on tasks with successfully downloaded or built image.",
      "successfullyBuild": "There is an image successfully built or downloaded for this task with creation date: {{createdAt}}",
      "failedBuild": "Building an image from the Dockerfile was unsuccessful.",
      "inProgress": "We are processing your request, please wait! If we need to download or build a new image, it may take some time.",
      "imageRequired": "Please provide a Docker Image or upload a Dockerfile!",
      "previousSemesterInfo": "Tester settings cannot be modified: the selected task belongs to a previous semester.",
      "results": "Automatic Tester Results",
      "notTested": "The automatic tester have not tested your solution yet.",
      "testFilesHelp": "Student solution will be loaded into the /test/submission/ folder, which will be the default working directory during compilation and testing. Test files are loaded into the /test/test_files/ folder. On Windows OS, the root folder will be C:\\\\test\\ in an analog manner.",
      "updateImage": "Update Docker image",
      "uploadPriorUpdate": "Docker image must be save before updating",
      "appType": "Application type",
      "appTypes": {
        "Console": "Console",
        "Web": "Web"
      },
      "port": "Port",
      "portHint": "Exposed port of the webserver running in the Docker container",
      "testCaseUpload": "You can import the list of test cases from XLS and CSV files. Important: the existing test cases will be discarded after the import!"
    },
    "exec": {
      "startUp": "Start web app",
      "tearDown": "Stop web app now",
      "autoTearDownAt": "App will auto shut down at:",
      "onStartUp": "App started at: {{url}}",
      "onTearDown": "The application has shut down",
      "visit": "Visit {{url}}",
      "webApp": "Web app",
      "form": {
        "runInterval": "Application up time"
      }
    },
    "git": {
      "gitRepo": "Git Repository",
      "path": "Path",
      "usage": "Usage",
      "taskLevelGitRepo": "Task-level git repository",
      "taskLevelGitRepoNotAvailable": "Task-level repository is not available, because this task has been created by an older version of TMS.",
      "cloneRepo": "Clone repository",
      "updateAfterStudentListChanged": "Update the repository after the list of students has changed",
      "getNewSolutions": "Get new solutions"
    },
    "sorting": {
      "sorting": "Sort by",
      "byUngradedFirst": "Ungraded first",
      "byName": "Student name",
      "byUploadTime": "Upload time"
    },
    "canvasAssignment": "Canvas assignment",
    "canvasUpload": "Visit the Canvas page of the assignment to upload a new solution!"
  },
  "status": {
    "accepted": "Accepted",
    "rejected": "Rejected",
    "lateSubmission": "Late submission"
  },
  "examQuestions": {
    "questionSet": "Question set",
    "questionSets": "Question sets",
    "createQuestionSet": "Create question set",
    "editQuestionSet": "Edit question set",
    "answers": "Answers",
    "newAnswer": "New answer",
    "editAnswer": "Edit answer",
    "correct": "Correct",
    "wrong": "Wrong",
    "newQuestion": "New question",
    "createQuestion": "Create question",
    "editQuestion": "Edit question",
    "successfulDuplicationQuestionSet": "Successfully duplicated"
  },
  "examTests": {
    "testName": "Test name",
    "newTest": "New test",
    "editTest": "Edit test",
    "tests": "Tests",
    "duration": "Duration",
    "writeDuration": "Write duration",
    "score": "Points",
    "results": "Results",
    "available": "Available",
    "questionAmount": "Question amount",
    "availablefrom": "Available from",
    "availableuntil": "Available to",
    "shuffled": "Shuffle questions and answers in test instances",
    "unique": "Generate unique test instance per student",
    "finalize": "Finalize",
    "questions": "Questions",
    "availableTests": "Available tests",
    "finishedTests": "Finished tests",
    "futureTests": "Future tests",
    "writeTest": "Write tests",
    "successfulDuplication": "Successfully duplicated",
    "successfulFinalization": "Successfully finalized",
    "noGroupCreated": "A group must be created before creating a new test"
  },
  "reactMde": {
    "write": "Editor",
    "preview": "Preview",
    "uploadingImage": "Uploading...",
    "pasteDropSelect": "Upload Images",
    "openImageManager": "Open Image Manager",
    "closeImageManager": "Close Image Manager"
  },
  "plagiarism": {
    "plagiarismCheck": "Plagiarisms",
    "newPlagiarismCheck": "New Plagiarism Check",
    "ignoreThreshold": "Ignore threshold",
    "ignoreThresholdHelp": "The maximum number of occurrences before it is ignored",
    "from": "From",
    "to": "To",
    "myTasks": "Show only my tasks",
    "result": "Result",
    "runMoss": "Run Moss",
    "runStarted": "{{name}}: check started",
    "runSuccess": "{{name}}: check is successfully finished",
    "tasksRequired": "Please select at least one task!",
    "studentsRequired": "Please select at least two students!",
    "noResults": "You have not run a check on this request yet. Click on the 'Run Moss' button!",
    "basefiles": {
      "basefiles": "Base files",
      "about": "These files can be added to plagiarism checks as exempted files. For example, instructor-provided files can be exempted to avoid false alarms when students legitimately use them."
    }
  },
  "codeCompass": {
    "codeCompass": "CodeCompass",
    "compileInstructions": "Compile instructions (bash script):",
    "compileInstructionsNeededPrefix": "To get all CodeCompass features, you need to provide a bash script that installs all the required packages, and another one which builds the project. The scripts are executed on Ubuntu 20.04 operating system. The base image can be found on the ",
    "compileInstructionsNeededPostfix": " site. By default the image with the runtime-sqlite tag is used.",
    "information": "CodeCompass information",
    "packages": "Package installation (bash script):",
    "parameters": "CodeCompass parameters",
    "start": "Start CodeCompass",
    "starting": "CodeCompass is currently starting, please wait!",
    "stop": "Stop CodeCompass",
    "successfulParsing": "The compilation of the project was successful, you can access all possible CodeCompass features:",
    "tooManyInstances": "There are currently too many CodeCompass instances running, so we placed your request into a queue. As soon as the needed resources are available, we will start the server and will send an e-mail to the user requesting the instance.",
    "unsuccessfulParsing": "The compilation of the project was not fully successful, there may be some CodeCompass features not available:"
  }
}
